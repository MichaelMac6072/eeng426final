/*
 * Blocks for syntax directed translation
 *
 */
import "globals.act";
import "channel.act";

/*
  a1of2: dual-rail data channel
  a1of1: single-rail control channel
  dualrail: one-bit of data
*/

/* 
 * Variable initialization
 */


defproc inv (bool in, out)
{
	prs {
		in -> out-
		~in -> out+
	}
}

defproc delaybuf(bool in, out)
{
  bool _x;
  prs {
     in => _x-
     _x => out-
  }
}

template<pint D>
defproc delay (bool in, out)
{
  delaybuf d[D];
  (i:D-1:d[i].out=d[i+1].in;)
  d[0].in = in;
  d[D-1].out = out;
}

defproc syn_var_init_true (dualrail v)
{
  prs {
    Reset -> v.f-
    v.f<8> -> v.t-
    v.t<8> -> v.f-
    [weak=1] ~v.t<4,4> -> v.f+
    [weak=1] ~v.f<4,4> -> v.t+
 }
}

/* 
 * Variable initialization
 */
defproc syn_var_init_false (dualrail v)
{
  prs {
    Reset -> v.t-
    v.f<8> -> v.t-
    v.t<8> -> v.f-
    [weak=1] ~v.t<4,4> -> v.f+
    [weak=1] ~v.f<4,4> -> v.t+
  }
}


/* mutually recursive definition of a completion tree */

template<pint N> defproc syn_invctree (bool in[N]; bool _out);
template<pint N> defproc syn_ctree (bool in[N]; bool out);

template<pint N>
defproc syn_invctree (bool in[N]; bool _out)
{
  [ N > 3 ->
      syn_ctree<N/2> l(in[0..N/2-1]);
      syn_ctree<N-N/2> r(in[N/2..N-1]);
      prs {
        l.out & r.out -> _out-
        ~l.out & ~r.out -> _out+
      }
  [] else ->
    prs {
     (&i:N:in[i]) -> _out-
     (&i:N:~in[i]) -> _out+
    }
  ]
}


template<pint N>
defproc syn_ctree (bool in[N]; bool out)
{
  [ N > 3 ->
      syn_invctree<N/2> l(in[0..N/2-1]);
      syn_invctree<N-N/2> r(in[N/2..N-1]);
      prs {
        l._out & r._out -> out-
        ~l._out & ~r._out -> out+
      }
  [] N = 1 -> out = in[0];
  [] else ->
      bool _out;
      prs {
      	(&i:N:in[i]) -> _out-
      	(&i:N:~in[i]) -> _out+
	_out => out-
      }
  ]
}

/* 
 *  Input: go
 *         in : channel
 *         v : one-bit variable
 *  
 */
defproc syn_recv (a1of1 go; dualrail v; a1of2 in)
{
  bool _goa;
  go.a = in.a;
  prs {
   [keeper=0] go.r <20> & _goa & in.t -> v.f-
   [keeper=0] go.r <20> & _goa & in.f -> v.t-
   go.r & (v.t & in.t | v.f & in.f) -> _goa-
  ~in.t & ~in.f & ~go.r -> _goa+
   Reset|_goa => go.a-
  }
}

defproc syn_send (a1of1 go; dualrail v; a1of2 out)
{
  bool _outt, _outf;
  bool _outa;

  prs {
 ~_Reset | ~go.r & ~_outa -> _outt+
  ~_Reset | ~go.r & ~_outa -> _outf+
    go.r & v.t  & _outa -> _outt-
   _outt => out.t-
   go.r & v.f & _outa -> _outf-
   _outf => out.f-
 

  out.a => _outa-
  _outa => go.a-
  }
}

/*
 *
 *  Expression  evaluation
 *
 */

/* Basecase: variable */
defproc syn_expr_var (bool go_r; dualrail v; dualrail out)
{
  _dualrail _out;
  prs {
   go_r & v.t -> _out.t-
   go_r & v.f -> _out.f-
  ~_Reset | ~go_r -> _out.t+
  ~_Reset | ~go_r -> _out.f+

   _out.t => out.t-
   _out.f => out.f-
  }
}

template <pint N>
defproc syn_expr_vararray (bool go_r; dualrail v[N]; dualrail out[N])
{
  syn_expr_var ev[N];
  (i:N: ev[i].go_r = go_r;
        ev[i].v = v[i];
        ev[i].out = out[i];
	)
}	

/* AND */
defproc syn_expr_and (dualrail in1, in2; dualrail out)
{
  _dualrail _out;
  prs {
    in1.t & in2.t -> _out.t-
   ~in1.t & ~in2.t -> _out.t+
    in1.f & (in2.t | in2.f) | in1.t & in2.f -> _out.f-
   ~in1.t & ~in1.f & ~in2.t & ~in2.f -> _out.f+

    _out.t => out.t-
    _out.f => out.f-
  }
}


/* 2-port AND function */
defproc and_1 (dualrail in1, in2; dualrail out)
{
	syn_expr_and and(in1,in2,out);
}

defproc bundled_and_1(bool go_r; dualrail v0; dualrail v1; dualrail out)
{

   delay<4> d;
   bool _dout;
   d.in = go_r;

	bool result, _result;
	prs{
		d.out => _dout-
		
	  (v0.t & v1.t) => _result-
	  _result => result-
		 
	  d.out & result -> out.f-
      ~_dout & ~_result & ~out.f -> out.t+
      d.out & _result -> out.t-
      ~_dout & ~result & ~out.t -> out.f+
      
      _dout -> out.f-
      _dout -> out.t-
	}
} 


/* 4-port AND */
defproc and4_1 (dualrail in1, in2, in3, in4; dualrail out)
{
	dualrail first, second;
	syn_expr_and one(in1,in2,first);
	syn_expr_and two(in3,in4,second);
	syn_expr_and three(first,second,out);
}



defproc bundled_and4_1(bool go_r; dualrail v0; dualrail v1; dualrail v2; dualrail v3; dualrail out)
{

   delay<4> d;
   bool _dout;
   d.in = go_r;

	bool result, _result;
	prs{
		d.out => _dout-
		
	  v0.t & v1.t & v2.t & v3.t => _result-
		~_result => result+
		 
	  d.out & result -> out.f-
      ~_dout & ~_result & ~out.f -> out.t+
      d.out & _result -> out.t-
      ~_dout & ~result & ~out.t -> out.f+
      
      _dout -> out.f-
      _dout -> out.t-
	}
} 

/* 3-port AND */
defproc and3_1 (dualrail in1, in2,in3; dualrail out)
{
  _dualrail _out;
  prs {
    in1.t & in2.t & in3.t -> _out.t-
   ~in1.t & ~in2.t & ~in3.t -> _out.t+
    in1.f & (in2.t | in2.f) & (in3.t | in3.f) | in1.t & in2.f & (in3.t | in3.f) | in1.t & in2.t & in3.f -> _out.f-
   ~in1.t & ~in1.f & ~in2.t & ~in2.f & ~in3.t & ~in3.f -> _out.f+

    _out.t => out.t-
    _out.f => out.f-
  }
}

defproc bundled_and3_1(bool go_r; dualrail v0; dualrail v1; dualrail v2; dualrail out)
{
   delay<4> d;
   bool _dout;
   d.in = go_r;
   bool result, _result;

	prs{
		d.out => _dout-
		
	  v0.t & v1.t & v2.t => _result-
		~_result => result+
		 
	  d.out & result -> out.f-
      ~_dout & ~_result & ~out.f -> out.t+
      d.out & _result -> out.t-
      ~_dout & ~result & ~out.t -> out.f+
      
      _dout -> out.f-
      _dout -> out.t-
	}
} 

/* OR */
defproc syn_expr_or (dualrail in1, in2; dualrail out)
{
  _dualrail _out;
  prs {
    in1.t & (in2.t|in2.f) | in1.f & in2.t  -> _out.t-
   ~in1.t & ~in1.f & ~in2.t & ~in2.f -> _out.t+
    in1.f & in2.f -> _out.f-
   ~in1.f & ~in2.f -> _out.f+
    _out.t => out.t-
    _out.f => out.f-
  }
}


/* 2-port OR function */
defproc or_1(dualrail in1, in2; dualrail out)
{
	syn_expr_or or(in1,in2,out);
}

defproc bundled_or_1 (bool go_r; dualrail v0; dualrail v1; dualrail out)
{

   delay<4> d;
   bool _dout;
   d.in = go_r;

	bool result, _result;
	prs{
		d.out => _dout-
		
	  (v0.t | v1.t) => _result-
	  _result => result-
		 
	  d.out & result -> out.f-
      ~_dout & ~_result & ~out.f -> out.t+
      d.out & _result -> out.t-
      ~_dout & ~result & ~out.t -> out.f+
      
      _dout -> out.f-
      _dout -> out.t-
	}
} 

/* 4-port OR */
defproc or4_1 (dualrail in1, in2, in3, in4; dualrail out)
{
	dualrail first, second;
	syn_expr_or one(in1,in2,first);
	syn_expr_or two(in3,in4,second);
	syn_expr_or three(first,second,out);
}

defproc bundled_or4_1 (bool go_r;dualrail v0; dualrail v1; dualrail v2; dualrail v3; dualrail out)
{

   delay<4> d;
   bool _dout;
   d.in = go_r;

	bool result, _result;
	prs{
		d.out => _dout-
		
	  (v0.t | v1.t | v2.t | v3.t) => _result-
	  _result => result-
		 
	  d.out & result -> out.f-
      ~_dout & ~_result & ~out.f -> out.t+
      d.out & _result -> out.t-
      ~_dout & ~result & ~out.t -> out.f+
      
      _dout -> out.f-
      _dout -> out.t-
	}
} 

/* 3-port OR */
defproc or3_1 (dualrail in1, in2, in3; dualrail out)
{
    _dualrail _out;
    prs {
      in1.t & (in2.t|in2.f) & (in3.t | in3.f) | in1.f & in2.t & (in3.t | in3.f) | in1.f & in2.f & in3.t  -> _out.t-
      ~in1.t & ~in1.f & ~in2.t & ~in2.f & ~in3.t & ~in3.f -> _out.t+
      in1.f & in2.f & in3.f -> _out.f-
      ~in1.f & ~in2.f & ~in3.f -> _out.f+
      _out.t => out.t-
      _out.f => out.f-
    }
}

defproc bundled_or3_1 (bool go_r;dualrail v0; dualrail v1; dualrail v2; dualrail out)
{

   delay<4> d;
   bool _dout;
   d.in = go_r;

	bool result, _result;
	prs{
		d.out => _dout-
		
	  (v0.t | v1.t | v2.t) => _result-
	  _result => result-
		 
	  d.out & result -> out.f-
      ~_dout & ~_result & ~out.f -> out.t+
      d.out & _result -> out.t-
      ~_dout & ~result & ~out.t -> out.f+
      
      _dout -> out.f-
      _dout -> out.t-
	}
} 

/* 3-port NOR */
defproc nor3_1 (dualrail in1, in2, in3; dualrail out)
{
    _dualrail _out;
    prs {
      in1.t & (in2.t|in2.f) & (in3.t | in3.f) | in1.f & in2.t & (in3.t | in3.f) | in1.f & in2.f & in3.t  -> _out.f-
      ~in1.t & ~in1.f & ~in2.t & ~in2.f & ~in3.t & ~in3.f -> _out.f+
      in1.f & in2.f & in3.f -> _out.t-
      ~in1.f & ~in2.f & ~in3.f -> _out.t+
      _out.t => out.t-
      _out.f => out.f-
    }
}

defproc bundled_nor3_1 (bool go_r;dualrail v0; dualrail v1; dualrail v2; dualrail out)
{

   delay<4> d;
   bool _dout;
   d.in = go_r;

	bool result, _result;
	prs{
		d.out => _dout-
		
	  (v0.t | v1.t | v2.t) => result-
	  result => _result-
		 
	  d.out & result -> out.f-
      ~_dout & ~_result & ~out.f -> out.t+
      d.out & _result -> out.t-
      ~_dout & ~result & ~out.t -> out.f+
      
      _dout -> out.f-
      _dout -> out.t-
	}
} 


/* NOT */
defproc syn_expr_not (dualrail in; dualrail out)
{
  out.t = in.f; 
  out.f = in.t;
}

/* 3-port NOR with negated first input */
defproc nor3_negfirst_1 (dualrail in1, in2,in3; dualrail out)
{	dualrail _in1;
	syn_expr_not in1_inv(in1,_in1);
	nor3_1 result(_in1,in2,in3,out);
}

defproc bundled_nor3_negfirst_1 (bool go_r; dualrail v0; dualrail v1; dualrail v2; dualrail out)
{

   delay<4> d;
   bool _dout;
   d.in = go_r;
   bool result, _result;

	prs{

	d.out => _dout-
		
        v0.f | v1.t | v2.t => result-
	~result => _result+
		 
	  d.out & result -> out.f-
      ~_dout & ~_result & ~out.f -> out.t+
      d.out & _result -> out.t-
      ~_dout & ~result & ~out.t -> out.f+
      
      _dout -> out.f-
      _dout -> out.t-
	}
} 

defproc syn_or2 (bool x, y, out)
{
  bool _or;
  prs {
    x | y => _or-
    _or => out-
  }
}

defproc syn_notand (bool x, y, out)
{
  bool _inv;

  prs {
      x => _inv-
      _inv | y => out-
  }
}
    

defproc syn_skip (a1of1 go)
{
  go.r = go.a;
}

/* Function that ANDs the first two booleans together and ORs them with the third*/
defproc bundled_and_or_1(bool go_r; dualrail v0; dualrail v1; dualrail v2; dualrail out)
{
   delay<4> d;
   bool _dout;
   d.in = go_r;
   bool result, _result;

   prs{
	d.out => _dout-	

	(v0.t & v1.t) | v2.t => _result-
	~_result => result+
		 
       d.out & result -> out.f-
      ~_dout & ~_result & ~out.f -> out.t+
      d.out & _result -> out.t-
      ~_dout & ~result & ~out.t -> out.f+

	_dout -> out.f-
	_dout -> out.t-

   }
}


/*
 * Simple sequencer
 */
defproc syn_fullseq (a1of1 go; a1of1 r)
{
  bool x;
  bool _gor;
  bool _goa;
  bool _ra;

  prs {
    ~x & ~_gor -> r.r+
     ~_ra -> x+
     Reset | x -> r.r-
   x & _ra -> _goa-
    _gor -> x-
    ~x -> _goa+
    go.r => _gor-
    _goa => go.a-
    r.a => _ra-
  }
}

/*
  Sequencing:  S1; S2

  Input: go
  Output: two channels for S1 and S2
*/
defproc syn_seq (a1of1 go; a1of1 s1, s2)
{
  go.r = s1.r;
  s1.a = s2.r;
  go.a = s2.a;
}

/*
  Parallel: S1 || S2
  Same I/O as syn_seq
*/
defproc syn_par (a1of1 go; a1of1 s1, s2)
{
  go.r = s1.r;
  go.r = s2.r;

  bool _c;

  prs {
    s1.a & s2.a -> _c-
   ~s1.a & ~s2.a -> _c+

   _c => go.a-
  }
}




